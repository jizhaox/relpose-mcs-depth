#include <Eigen/Dense>

using namespace Eigen;

MatrixXcd solver_depth_mono_2ac_ka_core(const VectorXd& data)
{
	// Compute coefficients
	VectorXd coeffs = data;

	// Setup elimination template
	static const int coeffs0_ind[] = { 0,35,70,175,210,0,1,35,36,70,71,175,176,210,1,2,36,37,71,72,176,177,210,211,2,3,37,38,72,73,177,178,210,211,3,4,38,39,73,74,178,179,211,4,39,74,179,211,0,5,35,40,70,75,175,180,210,1,5,6,36,40,41,71,75,76,176,180,181,210,2,6,7,37,41,42,72,76,77,177,181,182,210,211,3,7,8,38,42,43,73,77,78,178,182,183,211,4,8,39,43,74,78,179,183,211,5,9,40,44,75,79,180,184,210,212,6,9,10,41,44,45,76,79,80,181,184,185,210,212,7,10,11,42,45,46,77,80,81,182,185,186,211,212,8,11,43,46,78,81,183,186,211,212,9,12,44,47,79,82,184,187,210,212,10,12,13,45,47,48,80,82,83,185,187,188,212,0,15,35,50,70,85,175,190,210,1,15,16,36,50,51,71,85,86,176,190,191,210,2,16,17,37,51,52,72,86,87,177,191,192,210,211,3,17,18,38,52,53,73,87,88,178,192,193,211,4,18,39,53,74,88,179,193,211,5,15,19,40,50,54,75,85,89,180,190,194,210,6,16,19,20,41,51,54,55,76,86,89,90,181,191,194,195,210,9,19,22,44,54,57,79,89,92,184,194,197,210,212,15,25,50,60,85,95,190,200,210,213,16,25,26,51,60,61,86,95,96,191,200,201,210,213,19,25,28,54,60,63,89,95,98,194,200,203,210,213,25,31,60,66,95,101,200,206,210,213,7,17,20,21,42,52,55,56,77,87,90,91,182,192,195,196,211,10,20,22,23,45,55,57,58,80,90,92,93,185,195,197,198,212,12,14,47,49,82,84,187,189,212,8,18,21,43,53,56,78,88,91,183,193,196,211,11,13,46,48,81,83,186,188,211,212,13,14,48,49,83,84,188,189,212,14,49,84,189,212 };
	static const int coeffs1_ind[] = { 34,69,104,209,213,31,34,66,69,101,104,206,209,213,26,31,32,61,66,67,96,101,102,201,206,207,213,17,26,27,52,61,62,87,96,97,192,201,202,211,213,20,26,28,29,55,61,63,64,90,96,98,99,195,201,203,204,213,28,31,33,63,66,68,98,101,103,203,206,208,213,22,28,30,57,63,65,92,98,100,197,203,205,212,213,12,22,24,47,57,59,82,92,94,187,197,199,212,32,34,67,69,102,104,207,209,213,27,32,62,67,97,102,202,207,211,213,18,27,53,62,88,97,193,202,211,213,21,27,29,56,62,64,91,97,99,196,202,204,211,213,11,21,23,46,56,58,81,91,93,186,196,198,211,212,29,32,33,64,67,68,99,102,103,204,207,208,213,23,29,30,58,64,65,93,99,100,198,204,205,212,213,13,23,24,48,58,59,83,93,94,188,198,199,212,33,34,68,69,103,104,208,209,213,30,33,65,68,100,103,205,208,212,213,24,30,59,65,94,100,199,205,212,213,14,24,49,59,84,94,189,199,212 };
	static const int C0_ind[] = { 3,7,11,15,35,38,39,42,43,46,47,50,51,70,74,75,78,79,82,83,86,87,103,107,110,111,114,115,118,119,122,123,133,142,146,147,150,151,154,155,158,159,175,182,186,190,194,205,217,219,221,223,225,227,229,231,249,253,254,255,257,258,259,261,262,263,265,266,267,282,289,290,291,293,294,295,297,298,299,301,302,303,312,321,325,326,327,329,330,331,333,334,335,337,338,339,354,361,362,365,366,369,370,373,374,384,397,399,401,403,405,407,409,411,424,431,433,434,435,437,438,439,441,442,443,445,446,447,454,466,469,470,471,473,474,475,477,478,479,481,482,483,496,499,505,506,509,510,513,514,517,518,526,529,541,543,545,547,549,551,553,555,559,573,577,578,579,581,582,583,585,586,587,589,590,591,606,612,615,616,619,620,623,624,627,644,648,650,651,652,654,655,656,658,659,660,662,663,677,684,686,687,688,690,691,692,694,695,696,698,699,707,716,720,722,723,724,726,727,728,730,731,732,734,735,749,756,758,760,762,764,766,768,770,779,792,793,795,796,797,799,800,801,803,804,805,807,819,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,849,864,865,867,868,869,871,872,873,875,876,877,879,882,896,900,903,904,907,908,911,912,915,926,935,936,938,939,940,942,943,944,946,947,948,950,951,956,970,972,973,975,976,977,979,980,981,983,984,985,987,989,1005,1008,1011,1012,1015,1016,1019,1020,1023,1024,1040,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1071,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1109,1117,1119,1121,1123,1125,1127,1129,1131,1144,1152,1153,1154,1156,1157,1158,1160,1161,1162,1164,1165,1166,1173,1189,1190,1193,1194,1197,1198,1201,1202,1207,1212,1225,1226,1229,1230,1233,1234,1237,1238,1246,1261,1265,1269,1273,1279 } ;
	static const int C1_ind[] = { 0,4,8,12,16,36,39,40,43,44,47,48,51,62,72,74,75,76,78,79,80,82,83,84,86,87,101,108,110,111,112,114,115,116,118,119,120,122,123,134,139,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,174,180,181,183,184,185,187,188,189,191,192,193,195,207,216,217,219,220,221,223,224,225,227,228,229,231,242,244,252,253,255,256,257,259,260,261,263,264,265,267,279,288,290,292,294,296,298,300,302,308,324,326,328,330,332,334,336,338,340,347,360,362,364,366,368,370,372,374,380,385,396,397,398,400,401,402,404,405,406,408,409,410,413,420,432,433,434,436,437,438,440,441,442,444,445,446,450,455,468,469,470,472,473,474,476,477,478,480,481,482,489,504,505,506,508,509,510,512,513,514,516,517,518,524,526,540,541,542,544,545,546,548,549,550,552,553,554,561,576,577,580,581,584,585,588,589,593,612,613,616,617,620,621,624,625,628,630,648,649,652,653,656,657,660,661,665,667,684,685,688,689,692,693,696,697,702 };

	Matrix<double,36,36> C0; C0.setZero();
	Matrix<double,36,20> C1; C1.setZero();
	for (int i = 0; i < 407; i++) { C0(C0_ind[i]) = coeffs(coeffs0_ind[i]); }
	for (int i = 0; i < 233; i++) { C1(C1_ind[i]) = coeffs(coeffs1_ind[i]); } 

	Matrix<double,36,20> C12 = C0.colPivHouseholderQr().solve(C1);

	// Setup action matrix
	Matrix<double,27, 20> RR;
	RR << -C12.bottomRows(7), Matrix<double,20,20>::Identity(20, 20);

	static const int AM_ind[] = { 23,12,11,0,1,13,14,2,20,18,3,19,4,21,22,5,24,25,26,6 };
	Matrix<double, 20, 20> AM;
	for (int i = 0; i < 20; i++) {
		AM.row(i) = RR.row(AM_ind[i]);
	}

	Matrix<std::complex<double>, 3, 20> sols;
	sols.setZero();

	// Solve eigenvalue problem
	EigenSolver<Matrix<double, 20, 20> > es(AM);
	ArrayXcd D = es.eigenvalues();
	ArrayXXcd V = es.eigenvectors();
	V = (V / V.row(0).array().replicate(20, 1)).eval();

    sols.row(0) = V.row(1).array();
    sols.row(1) = V.row(8).array();
    sols.row(2) = D.transpose().array();

	return sols;
}
